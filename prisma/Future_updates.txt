
ns-3 part :
- rename the stats variables in packet routing gym.cc and agent.py to be more descriptive(total and overlay)
- Rearrrange the code in packet routing gym.cc to be more readable
- Fix the problem of NN signalling where the agent considers the weights arrived if the last packet has arrived even though the other packets might be lost
- Add dynamically the NN size for big signalling in ns-3
- rewrite as the following :
    - signalling in separated files (signalling.py) calling files for big, small and ping signalling
    - have a module for receive pkt, send pkt and events like pkt lost, pkt arrived to dst, new pkt
    - have a module for the overlay node and underlay node
    - be able to draw the working tree of the ns-3 in a simple schema.
- The objective is to be able to provide easy access to the following :
    - the topology of the network (underlay and overlay)
    - the traffic matrix.
    - the control pkts settings (big, smalll, ping) and the ability to add new type
    - changing the behaviour of the nodes (underlay and overlay) in different situations (pkt lost, pkt arrived to destination, pkt arrived to hop, new pkt)
    - traffic generation (changing the generation process of the traffic, the type of the traffic ect...)
    - rearrange the function sending the small signalling pkts
    - make ping packets and signalling packets have the get Traffic Variable tag to overlay
    - remove unnecessary print and commented code
	- make a bound for sync step (it must not be 0)

Python part :
- Fix the segIndex to be dynamic using nn_size.
- put extract info from info field as a function.
- Add the tensorboard logging in main.py and agent.py in the logger function



python3 main.py \
	--seed=100 \
	--simTime=10 \
	--basePort=5000  \
	--train=1 \
	--agent_type=dqn_buffer \
	--session_name=test_ \
	--signaling_type=NN \
	--logs_parent_folder=examples/abilene/test \
	--traffic_matrix_root_path=examples/abilene/traffic_matrices/ \
	--traffic_matrix_index=0 \
	--agent_adjacency_matrix_path=examples/abilene/adjacency_matrix_2_5n.txt \
	--adjacency_matrix_path=examples/abilene/adjacency_matrix.txt \
	--node_coordinates_path=examples/abilene/node_coordinates_5n.txt \
	--map_overlay_path=mapOverlay_5n.txt \
	--training_step=0.01 \
	--batch_size=512 \
	--lr=0.0001 \
	--exploration_final_eps=0.1 \
	--exploration_initial_eps=0.1 \
	--iterationNum=5000 \
	--gamma=1.0 \
	--training_trigger_type="time" \
	--save_models=0 \
	--start_tensorboard=0 \
	--replay_buffer_max_size=10000 \
 	--link_delay="1ms" \
	--load_factor=0.6 \
	--load_factor_trainning=1 \
	--sync_step=1000 \
	--max_out_buffer_size=16260 \
	--sync_ratio=0.2 \
	--signalingSim=1 \
	--nPacketsOverlay=10 \
	--movingAverageObsSize=1 \
	--prioritizedReplayBuffer=0 \
	--activateUnderlayTraffic=1 \
	--groundTruthFrequence=1 \
	--load_path=examples/abilene/dqn_buffer_sp_init_overlay_modified_5n